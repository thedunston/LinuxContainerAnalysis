#!/bin/bash

# Malware Monitoring Script
# Monitors process execution, file changes, and network activity

LOG_DIR="/var/log/malware-monitor"
mkdir -p "$LOG_DIR"

PROCESS_LOG="$LOG_DIR/processes.log"
FILE_LOG="$LOG_DIR/files.log"
NETWORK_LOG="$LOG_DIR/network.log"
STRACE_LOG="$LOG_DIR/strace.log"

echo "========================================="
echo "  Malware Monitoring Started"
echo "  $(date)"
echo "========================================="
echo ""
echo "Logs will be saved to: $LOG_DIR"
echo "  - Process activity: $PROCESS_LOG"
echo "  - File changes: $FILE_LOG"
echo "  - Network activity: $NETWORK_LOG"
echo "  - System calls: $STRACE_LOG"
echo ""

# Function to monitor processes
monitor_processes() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting process monitoring..." | tee -a "$PROCESS_LOG"
    
    # Capture initial process snapshot
    ps auxf > "$LOG_DIR/processes_initial.txt"
    lsof > "$LOG_DIR/open_files_initial.txt" 2>/dev/null
    
    # Get baseline process list
    ps -eo pid,ppid,user,cmd --no-headers > /tmp/ps_baseline.txt
    
    # Monitor new processes
    while true; do
        # Get current process list
        ps -eo pid,ppid,user,cmd --no-headers > /tmp/ps_current.txt
        
        # Find new processes
        comm -13 <(sort /tmp/ps_baseline.txt) <(sort /tmp/ps_current.txt) | while read line; do
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] NEW PROCESS: $line" >> "$PROCESS_LOG"
            
            # Get detailed info about new process
            pid=$(echo "$line" | awk '{print $1}')
            if [ -d "/proc/$pid" ]; then
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] Process $pid details:" >> "$PROCESS_LOG"
                echo "  Command line: $(cat /proc/$pid/cmdline 2>/dev/null | tr '\0' ' ')" >> "$PROCESS_LOG"
                echo "  Environment: $(cat /proc/$pid/environ 2>/dev/null | tr '\0' '\n' | head -20)" >> "$PROCESS_LOG"
                echo "  Open files:" >> "$PROCESS_LOG"
                lsof -p "$pid" 2>/dev/null | head -20 >> "$PROCESS_LOG"
            fi
        done
        
        # Update baseline
        cp /tmp/ps_current.txt /tmp/ps_baseline.txt
        
        sleep 1
    done
}

# Function to monitor file system changes
monitor_files() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting file system monitoring..." | tee -a "$FILE_LOG"
    
    # Monitor key directories for changes
    inotifywait -m -r -e create,delete,modify,move,attrib \
        /tmp /var/tmp /dev/shm /etc /home/app \
        --format '[%T] %e %w%f' --timefmt '%Y-%m-%d %H:%M:%S' \
        2>/dev/null | while read line; do
        echo "$line" >> "$FILE_LOG"
    done
}

# Function to monitor network activity
monitor_network() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting network monitoring..." | tee -a "$NETWORK_LOG"
    
    # Capture initial network state
    ss -tunap > "$LOG_DIR/network_initial.txt" 2>/dev/null
    
    # Get baseline connections
    ss -tunap 2>/dev/null | grep -v "127.0.0.1" > /tmp/net_baseline.txt
    
    # Monitor network connections
    while true; do
        # Get current connections
        ss -tunap 2>/dev/null | grep -v "127.0.0.1" > /tmp/net_current.txt
        
        # Find new connections
        comm -13 <(sort /tmp/net_baseline.txt) <(sort /tmp/net_current.txt) | while read line; do
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] NEW CONNECTION: $line" >> "$NETWORK_LOG"
            
            # Extract PID if available
            pid=$(echo "$line" | grep -oP 'pid=\K[0-9]+' | head -1)
            if [ -n "$pid" ] && [ -d "/proc/$pid" ]; then
                echo "  Process: $(cat /proc/$pid/cmdline 2>/dev/null | tr '\0' ' ')" >> "$NETWORK_LOG"
            fi
        done
        
        # Log all listening ports
        ss -tulpn 2>/dev/null | grep LISTEN | while read line; do
            if ! grep -q "$line" /tmp/net_baseline.txt 2>/dev/null; then
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] NEW LISTENER: $line" >> "$NETWORK_LOG"
            fi
        done
        
        # Update baseline
        cp /tmp/net_current.txt /tmp/net_baseline.txt
        
        sleep 1
    done
}

# Function to log system information
log_system_info() {
    INFO_LOG="$LOG_DIR/system_info.txt"
    
    echo "=== System Information ===" > "$INFO_LOG"
    echo "Date: $(date)" >> "$INFO_LOG"
    echo "" >> "$INFO_LOG"
    
    echo "=== Kernel Version ===" >> "$INFO_LOG"
    uname -a >> "$INFO_LOG"
    echo "" >> "$INFO_LOG"
    
    echo "=== Environment Variables ===" >> "$INFO_LOG"
    env >> "$INFO_LOG"
    echo "" >> "$INFO_LOG"
    
    echo "=== Open Files ===" >> "$INFO_LOG"
    lsof 2>/dev/null >> "$INFO_LOG"
    echo "" >> "$INFO_LOG"
    
    echo "=== Network Configuration ===" >> "$INFO_LOG"
    ip addr 2>/dev/null >> "$INFO_LOG"
    echo "" >> "$INFO_LOG"
    
    echo "System information saved to: $INFO_LOG"
}

# Start background monitoring
echo "Starting background monitors..."
monitor_processes &
PROC_PID=$!

monitor_files &
FILE_PID=$!

monitor_network &
NET_PID=$!

# Log initial system state
log_system_info

echo ""
echo "========================================="
echo "  Monitoring Active"
echo "========================================="
echo ""
echo "Background process PIDs:"
echo "  - Process monitor: $PROC_PID"
echo "  - File monitor: $FILE_PID"
echo "  - Network monitor: $NET_PID"
echo ""
echo "To view logs in real-time:"
echo "  tail -f $PROCESS_LOG"
echo "  tail -f $FILE_LOG"
echo "  tail -f $NETWORK_LOG"
echo ""
echo "To stop monitoring:"
echo "  kill $PROC_PID $FILE_PID $NET_PID"
echo ""

# Keep script running
wait
